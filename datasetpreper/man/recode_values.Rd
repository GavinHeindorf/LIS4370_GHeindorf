% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/recode_values.R
\name{recode_values}
\alias{recode_values}
\title{Recode Values}
\usage{
recode_values(
  variable,
  reverse = TRUE,
  curlevels = FALSE,
  newlevels = FALSE,
  labels = FALSE,
  remove = FALSE
)
}
\arguments{
\item{variable}{Vector containing the values to be recoded.}

\item{reverse}{T/F, should values simply be recoded? Default is True.
Assumes current levels are numeric.}

\item{curlevels}{Optional: vector containing the current levels of
your variable.}

\item{newlevels}{Optional: vector containing the new levels for the variable,
should correspond directly with 'curlevels'.}

\item{labels}{Optional: if you would like the returned variable to be a
factor with labels, provide a vector containing labels equal to the length
of 'newlevels'.}

\item{remove}{Level(s) from original variable that you would like removed
before the variable is recoded (do not include the level(s) in the
'curlevels' or 'newlevels' arguments.}
}
\value{
'recode_values()' returns the original variable recoded and
formatted as a factor, without labels if none are provided for 'labels'
in the function call.
}
\description{
'recode_values()' allows one to easily reverse code, or otherwise recode
a variable by specifying new values for each of the original values within
a vector.
}
\examples{
datapreper::ex_QuestData$Q1
recode_values(datapreper::ex_QuestData$Q1,
              reverse = TRUE)

datapreper::ex_QuestData$Q2
recode_values(datapreper::ex_QuestData$Q2,
              reverse = FALSE,
              curlevels = c(1, 2, 3, 4, 5),
              newlevels = c(0, 1, 2, 3, 4),
              remove = NA)

datapreper::ex_QuestData$Q3
recode_values(datapreper::ex_QuestData$Q3,
              reverse = FALSE,
              curlevels = c(1, 2, 3, 4, 5),
              newlevels = c(10, 20, 30, 40, 50),
              labels = c("Low", "Mid-Low", "Mid",
                          "Mid-High", "High"),
              remove = FALSE)

}
